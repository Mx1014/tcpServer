<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
<!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->


<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->


<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志文件 输入位置 -->
    <property name="log_dir" value="logs"/>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="1"/>


    <!--&lt;!&ndash; ConsoleAppender 控制台输出日志 &ndash;&gt;-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%L  -%msg%n</pattern>
        </encoder>
    </appender>

    <!--ERROR级别的日志-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 过滤器，只记录ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_dir}/error/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--这个配置里的数字单位是看fileNamePattern里配置的日期格式来确定，如上面配置日期格式是yyyy-MM-dd，配置到天，那么这里的30指的就是保留30天的日志，在第31天之后，每天会删除30天前的日志。-->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%date{yyyy-MM-dd HH:mm:ss}] [%-5level] [%logger:%line] --%mdc{client} %msg%n</pattern>
        </encoder>
    </appender>



    <!--&lt;!&ndash;INFO级别日志&ndash;&gt;-->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 过滤器，只记录INFO级别日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_dir}/info/info.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--这个配置里的数字单位是看fileNamePattern里配置的日期格式来确定，如上面配置日期格式是yyyy-MM-dd，配置到天，那么这里的30指的就是保留30天的日志，在第31天之后，每天会删除30天前的日志。-->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%date{yyyy-MM-dd HH:mm:ss}] [%-5level] [%logger:%line] --%mdc{client} %msg%n</pattern>
        </encoder>
    </appender>




    <logger name="java.sql.PreparedStatement" value="ERROR"/>
    <logger name="java.sql.Connection" value="ERROR"/>
    <logger name="java.sql.Statement" value="ERROR"/>
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.hibernate" level="WARN"/>
    <logger name="com.mchange" level="WARN"/>
    <logger name="org.mybatis" level="WARN"/>
    <logger name="org.apache.ibatis" level="WARN"/>
    <logger name="cn.usr.dao" level="WARN"/>
    <logger name="org.apache.http" level="WARN"/>
    <logger name="io.lettuce.core" level="WARN"/>
    <logger name="com.zaxxer.hikari.pool" level="WARN"/>
    <logger name="org.apache" level="WARN"/>
    <logger name="io.netty" level="INFO"/>
    <logger name="com.zaxxer" level="INFO"/>
    <logger name="springfox.documentation" level="WARN"/>


    <!-- root级别   DEBUG -->
    <root level="debug">
        <!-- 控制台输出 -->
        <appender-ref ref="STDOUT"/>
        <!--文件输出 -->
        <appender-ref ref="INFO"/>
        <appender-ref ref="ERROR"/>
    </root>

</configuration>
